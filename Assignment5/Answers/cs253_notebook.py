# -*- coding: utf-8 -*-
"""cs253_assign_5_190924.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1OPW3FmLfx1oBsoSoLzQ6cqRlfbPlDFeh
"""

import matplotlib.pyplot as plt
import numpy as np

#Bar1
Years = [2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020]
Positions= [3, 1, 5, 4, 5, 4, 4, 1, 1, 2, 1, 1, 1, 1]
plt.bar(Years, Positions)
plt.gca().invert_yaxis()
plt.xlabel("Years")
plt.ylabel("Positions")
plt.show()
#pie

y = np.array([95, 40, 30, 21, 19, 6, 9, 4, 6, 2,4,2,1, 1, 1, 1])
mylabels = ["1", "2", "3", "4", "5", "6", "7", "8","9","10","12","13","14","16","18","19"]
myexplode = [0, 0.05,0.05,0.075,0.12,0.2,0.2,0.20,0.2,0.2,0.2,0.4,0.6,0.75,0.85,1.2]
plt.pie(y, labels = mylabels,  startangle = 0, explode= myexplode)

plt.title ("Positions secured over all races")
plt.show()

#heatmap, year vs track 

  
  

import io
import pandas as pd
  
df = pd.read_csv('data/GrandPrix.csv')

df.head()
df.shape
df.columns
import seaborn as sns;
heatmap = sns.heatmap(df, cmap="YlGnBu", annot=True, xticklabels=True, yticklabels=np.arange(2007,2021),linewidths=1) 
heatmap.set_yticklabels(heatmap.get_yticklabels(), rotation=30) 
plt.ylabel("Years")
plt.show()


#scatter plot

df = pd.read_csv('data/scatter.csv')
sns.scatterplot(data = df, x = "Date", y = "Rank")
plt.gca().invert_yaxis()
plt.ylabel("Position")
plt.xlabel("Years")
plt.show()
#radar chart
categories = ['Races (scaled down to 0.025x)', 'World Tiltles', 'Wins (0.1x)', 'Podiums (0.05x)', 'Points Finishes (0.04x)', 'Pole Positions (0.1x)']
categories = [*categories, categories[0]]

HAM = [6.6, 7, 9.4, 8.15, 9.08, 9.7]
MSC = [7.7, 7, 9.1, 7.75, 8.84, 6.8]
HAM = [*HAM, HAM[0]]
MSC = [*MSC, MSC[0]]


label_loc = np.linspace(start=0, stop=2 * np.pi, num=len(HAM))

plt.figure(figsize=(8, 8))
plt.subplot(polar=True)
plt.plot(label_loc, HAM, label='HAM')
plt.plot(label_loc, MSC, label='MSC')
plt.title('Lewis Hamilton vs Michael Schumacher', size=20, y=1.05)
lines, labels = plt.thetagrids(np.degrees(label_loc), labels=categories)
plt.legend()
plt.show()
